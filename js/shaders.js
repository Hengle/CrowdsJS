var lambert_fragment_shader_src = [
'precision highp float;',
'varying vec4 fs_col;',
'varying vec4 fs_nor;',
'varying vec4 lightVec;',
'void main(void) {',
'  float diffuseTerm = dot(normalize(fs_nor), normalize(lightVec));',
'  if (diffuseTerm < 0.0) {',
'    diffuseTerm = diffuseTerm * -0.3;',
'  }',
'  diffuseTerm = clamp(diffuseTerm, 0.0, 1.0);',
'  float ambientTerm = 0.2;',
'  float lightIntensity = diffuseTerm + ambientTerm;',
'  gl_FragColor = vec4(fs_col.rgb * lightIntensity, fs_col.a);',
'}',
].join("\n");
var lambert_vertex_shader_src = [
'attribute vec4 vs_pos;',
'attribute vec4 vs_col;',
'attribute vec4 vs_nor;',
'varying vec4 fs_col;',
'varying vec4 fs_nor;',
'uniform mat4 u_Model;',
'uniform mat4 u_ViewProj;',
'uniform mat4 u_InvTrans;',
'uniform vec4 u_Color;',
'varying vec4 lightVec;',
'const vec4 lightPos = vec4(20, 50, 30, 1);',
'void main(void) {',
'  vec4 modelposition = u_Model * vs_pos;',
'  gl_Position = u_ViewProj * modelposition;',
'  fs_col = u_Color;',
'  fs_nor = u_InvTrans * vs_nor;',
'  lightVec = lightPos - modelposition;',
'}',
].join("\n");
var noise_fragment_shader_src = [
'precision highp float; ',
'varying vec2 fs_uv;',
'uniform float u_Scale;',
'//',
'// Description : Array and textureless GLSL 2D simplex noise function.',
'//      Author : Ian McEwan, Ashima Arts.',
'//  Maintainer : ijm',
'//     Lastmod : 20110822 (ijm)',
'//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.',
'//               Distributed under the MIT License. See LICENSE file.',
'//               https://github.com/ashima/webgl-noise',
'// ',
'vec3 mod289(vec3 x) {',
'  return x - floor(x * (1.0 / 289.0)) * 289.0;',
'}',
'vec2 mod289(vec2 x) {',
'  return x - floor(x * (1.0 / 289.0)) * 289.0;',
'}',
'vec3 permute(vec3 x) {',
'  return mod289(((x*34.0)+1.0)*x);',
'}',
'float snoise(vec2 v)',
'  {',
'  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0',
'                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)',
'                     -0.577350269189626,  // -1.0 + 2.0 * C.x',
'                      0.024390243902439); // 1.0 / 41.0',
'// First corner',
'  vec2 i  = floor(v + dot(v, C.yy) );',
'  vec2 x0 = v -   i + dot(i, C.xx);',
'// Other corners',
'  vec2 i1;',
'  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0',
'  //i1.y = 1.0 - i1.x;',
'  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);',
'  // x0 = x0 - 0.0 + 0.0 * C.xx ;',
'  // x1 = x0 - i1 + 1.0 * C.xx ;',
'  // x2 = x0 - 1.0 + 2.0 * C.xx ;',
'  vec4 x12 = x0.xyxy + C.xxzz;',
'  x12.xy -= i1;',
'// Permutations',
'  i = mod289(i); // Avoid truncation effects in permutation',
'  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))',
'    + i.x + vec3(0.0, i1.x, 1.0 ));',
'  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);',
'  m = m*m ;',
'  m = m*m ;',
'// Gradients: 41 points uniformly over a line, mapped onto a diamond.',
'// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)',
'  vec3 x = 2.0 * fract(p * C.www) - 1.0;',
'  vec3 h = abs(x) - 0.5;',
'  vec3 ox = floor(x + 0.5);',
'  vec3 a0 = x - ox;',
'// Normalise gradients implicitly by scaling m',
'// Approximation of: m *= inversesqrt( a0*a0 + h*h );',
'  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );',
'// Compute final noise value at P',
'  vec3 g;',
'  g.x  = a0.x  * x0.x  + h.x  * x0.y;',
'  g.yz = a0.yz * x12.xz + h.yz * x12.yw;',
'  return 130.0 * dot(m, g);',
'}',
'void main(void) {',
'  float amount = max(0.05, snoise(u_Scale*fs_uv));',
'  gl_FragColor = vec4(amount, amount, amount, 1);',
'}',
].join("\n");
var noise_vertex_shader_src = [
'attribute vec4 vs_pos;',
'attribute vec2 vs_uv;',
'varying vec2 fs_uv;',
'void main(void) {',
'  gl_Position = vs_pos;',
'  fs_uv = vs_uv;',
'}',
].join("\n");
var texture_fragment_shader_src = [
'precision highp float;',
'uniform sampler2D u_image;',
'varying vec4 fs_nor;',
'varying vec2 fs_uv;',
'varying vec4 lightVec;',
'uniform bool textureBound;',
'void main(void) {',
'  float diffuseTerm = dot(normalize(fs_nor), normalize(lightVec));',
'  if (diffuseTerm < 0.0) {',
'    diffuseTerm = diffuseTerm * -0.3;',
'  }',
'  diffuseTerm = clamp(diffuseTerm, 0.0, 1.0);',
'  float ambientTerm = 0.2;',
'  float lightIntensity = diffuseTerm + ambientTerm;',
'  vec4 col = texture2D(u_image, fs_uv);',
'  // gl_FragColor = vec4(col.rgb * lightIntensity, col.a);',
'  // gl_FragColor = vec4(1,1,1,1);',
'  gl_FragColor = vec4(col.rgb * lightIntensity, 1);',
'  if (!textureBound) {',
'    gl_FragColor = vec4(0.8,0.8,0.8,1);',
'  }',
'  // gl_FragColor = vec4(fs_uv, 0,1);',
'}',
].join("\n");
var texture_vertex_shader_src = [
'attribute vec4 vs_pos;',
'attribute vec4 vs_nor;',
'attribute vec2 vs_uv;',
'varying vec4 fs_nor;',
'varying vec2 fs_uv;',
'uniform mat4 u_Model;',
'uniform mat4 u_ViewProj;',
'uniform mat4 u_InvTrans;',
'varying vec4 lightVec;',
'const vec4 lightPos = vec4(20, 50, 30, 1);',
'void main(void) {',
'  fs_uv = vs_uv;',
'  vec4 modelposition = u_Model * vs_pos;',
'  gl_Position = u_ViewProj * modelposition;',
'  fs_nor = u_InvTrans * vs_nor;',
'  lightVec = lightPos - modelposition;',
'}',
].join("\n");
var velocity_fragment_shader_src = [
'precision highp float;',
'uniform sampler2D u_image0; ',
'uniform sampler2D u_image1;',
'uniform sampler2D u_comfortMap; ',
'uniform bool u_useComfortMap;',
'uniform sampler2D u_weights; ',
'uniform float u_R;',
'uniform float numAgents;',
'uniform vec2 windowSize;',
'uniform vec2 u_gridSize;',
'uniform int drawMode;',
'uniform float u_gScale;',
'varying vec2 fs_uv;',
'const int R = 1337;',
'//',
'// Description : Array and textureless GLSL 2D simplex noise function.',
'//      Author : Ian McEwan, Ashima Arts.',
'//  Maintainer : ijm',
'//     Lastmod : 20110822 (ijm)',
'//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.',
'//               Distributed under the MIT License. See LICENSE file.',
'//               https://github.com/ashima/webgl-noise',
'// ',
'vec3 mod289(vec3 x) {',
'  return x - floor(x * (1.0 / 289.0)) * 289.0;',
'}',
'vec2 mod289(vec2 x) {',
'  return x - floor(x * (1.0 / 289.0)) * 289.0;',
'}',
'vec3 permute(vec3 x) {',
'  return mod289(((x*34.0)+1.0)*x);',
'}',
'float snoise(vec2 v)',
'  {',
'  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0',
'                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)',
'                     -0.577350269189626,  // -1.0 + 2.0 * C.x',
'                      0.024390243902439); // 1.0 / 41.0',
'// First corner',
'  vec2 i  = floor(v + dot(v, C.yy) );',
'  vec2 x0 = v -   i + dot(i, C.xx);',
'// Other corners',
'  vec2 i1;',
'  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0',
'  //i1.y = 1.0 - i1.x;',
'  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);',
'  // x0 = x0 - 0.0 + 0.0 * C.xx ;',
'  // x1 = x0 - i1 + 1.0 * C.xx ;',
'  // x2 = x0 - 1.0 + 2.0 * C.xx ;',
'  vec4 x12 = x0.xyxy + C.xxzz;',
'  x12.xy -= i1;',
'// Permutations',
'  i = mod289(i); // Avoid truncation effects in permutation',
'  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))',
'    + i.x + vec3(0.0, i1.x, 1.0 ));',
'  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);',
'  m = m*m ;',
'  m = m*m ;',
'// Gradients: 41 points uniformly over a line, mapped onto a diamond.',
'// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)',
'  vec3 x = 2.0 * fract(p * C.www) - 1.0;',
'  vec3 h = abs(x) - 0.5;',
'  vec3 ox = floor(x + 0.5);',
'  vec3 a0 = x - ox;',
'// Normalise gradients implicitly by scaling m',
'// Approximation of: m *= inversesqrt( a0*a0 + h*h );',
'  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );',
'// Compute final noise value at P',
'  vec3 g;',
'  g.x  = a0.x  * x0.x  + h.x  * x0.y;',
'  g.yz = a0.yz * x12.xz + h.yz * x12.yw;',
'  return 130.0 * dot(m, g);',
'}',
'int toID(vec4 col) {',
'  int RES = 10;',
'  return int(col.r*float(RES)+0.5) + int(col.g*float(RES)+0.5)*RES + int(col.b*float(RES)+0.5)*RES*RES;',
'}',
'void main(void) {',
'  vec4 col = texture2D(u_image0, fs_uv);',
'  int id = toID(col);',
'  vec4 data = texture2D(u_image1, vec2(float(id)/(numAgents-0.5), 0.0));',
'  vec3 pos = vec3(data.xy, 0);',
'  vec3 gol = vec3(data.zw, 0);',
'  vec3 golVec = gol - pos;',
'  if (drawMode == 3) {',
'    if (length(golVec.xy * windowSize) <= float(R)) {',
'      gl_FragColor = vec4(normalize(golVec) / u_gScale / float(R) * 0.5 + vec3(0.5,0.5,0), 1);',
'      return;',
'    }',
'    float totalWeight = 0.0;',
'    for (int i = -R; i < R; i++) {',
'      for (int j = -R; j < R; j++) {',
'        vec2 uv = fs_uv + vec2(i, j) / windowSize;',
'        col = texture2D(u_image0, uv);',
'        vec4 wt = texture2D(u_weights, uv);',
'        wt *= (',
'          (1.0 - float(u_useComfortMap)) + ',
'          float(u_useComfortMap)*texture2D(u_comfortMap, uv).x',
'        );',
'        vec3 markerVec = (vec3(uv,0) - pos) * vec3(windowSize[0], windowSize[1], 1) * u_gScale; ',
'        if (',
'          id == toID(col) && ',
'          // i != 0 && ',
'          // j != 0 &&',
'          length(markerVec) <= float(R)',
'          // length(markerVec) >= 0.25',
'          ) {',
'          // ',
'          // float weight = 1.0 + dot(normalize(markerVec), normalize(golVec));',
'          float weight = min(1.0,wt[0]);',
'          totalWeight += weight;',
'        }',
'      }',
'    }',
'    if (totalWeight < 0.01) {',
'      gl_FragColor = vec4(0.5, 0.5, 0, 1);',
'      return;',
'    }',
'    vec3 cumul = vec3(0,0,0);',
'    for (int i = -R; i < R; i++) {',
'      for (int j = -R; j < R; j++) {',
'        vec2 uv = fs_uv + vec2(i, j) / windowSize;',
'        col = texture2D(u_image0, uv);',
'        vec4 wt = texture2D(u_weights, uv);',
'        wt *= (',
'          (1.0 - float(u_useComfortMap)) + ',
'          float(u_useComfortMap)*texture2D(u_comfortMap, uv).x',
'        );',
'        vec3 markerVec = (vec3(uv,0) - pos) * vec3(windowSize[0], windowSize[1], 1)  * u_gScale; /// float(R);  ',
'        if (',
'          id == toID(col) && ',
'          // i != 0 && ',
'          // j != 0 && ',
'          length(markerVec) <= float(R)',
'          // length(markerVec) >= 0.25',
'          ) {',
'          // float weight = 1.0 + dot(normalize(markerVec), normalize(golVec));',
'          float weight = min(1.0,wt[0]);',
'          weight = weight / totalWeight / float(R) / u_gScale;',
'          cumul += markerVec * weight;',
'        }',
'        // }',
'      }',
'    }',
'    gl_FragColor = vec4(cumul*0.5 + vec3(0.5,0.5,0), 1);',
'    return;',
'  }',
'  ',
'  vec3 marker = 2.0*vec3(fs_uv, 0) - vec3(1,1,0);',
'  vec3 markerVec = vec3(fs_uv, 0) - pos;',
'  golVec = gol - pos;',
'  float weight = 1.0 + dot(normalize(markerVec), normalize(golVec));',
'  // weight = weight * snoise(50.0*fs_uv);',
'  weight *= (',
'    (1.0 - float(u_useComfortMap)) + ',
'    float(u_useComfortMap)*texture2D(u_comfortMap, fs_uv).x',
'  );',
'  bool mask = length(markerVec) < float(R) / windowSize.x;',
'  weight = float(mask) * weight;',
'  if (drawMode == 0) {',
'    gl_FragColor = vec4(weight,weight,weight,1);',
'  } else if (drawMode == 1) {',
'    gl_FragColor = vec4(float(mask) * abs(normalize(golVec)), 1);',
'  } else if (drawMode == 2) {',
'    gl_FragColor = vec4(float(mask) * abs(normalize(markerVec)), 1);',
'  }',
'  if (distance(fs_uv, vec2(0.5,0.5)) < float(R) / windowSize.x) {',
'    // gl_FragColor = vec4(0,1,0,1);',
'  }',
'}',
].join("\n");
var velocity_vertex_shader_src = [
'attribute vec4 vs_pos;',
'attribute vec2 vs_uv;',
'varying vec2 fs_uv;',
'void main(void) {',
'  gl_Position = vs_pos;',
'  gl_PointSize = 2.0;',
'  fs_uv = vs_uv;',
'}',
].join("\n");
var voronoi_fragment_shader_src = [
'precision highp float;',
'varying vec4 fs_col;',
'void main(void) {',
'  gl_FragColor = fs_col;',
'}',
].join("\n");
var voronoi_refine_fragment_shader_src = [
'precision highp float;',
'uniform sampler2D u_image;',
'uniform vec2 windowSize;',
'uniform float u_gScale;',
'varying vec2 fs_uv;',
'const int R = 1337;',
'void main(void) {',
'  vec4 col = texture2D(u_image, fs_uv);',
'  gl_FragColor = col;',
'  for (int i = -R; i < R; i++) {',
'    for (int j = -R; j < R; j++) {',
'      vec2 uv = fs_uv + vec2(i, j) / windowSize;',
'      vec4 col2 = texture2D(u_image, uv);',
'      if (col != col2) {',
'        gl_FragColor = vec4(1,1,1,1);',
'        return;',
'      }',
'    }',
'  }',
'}',
].join("\n");
var voronoi_refine_vertex_shader_src = [
'attribute vec4 vs_pos;',
'attribute vec2 vs_uv;',
'varying vec2 fs_uv;',
'void main(void) {',
'  gl_Position = vs_pos;',
'  fs_uv = vs_uv;',
'}',
].join("\n");
var voronoi_vertex_shader_src = [
'attribute vec4 vs_pos;',
'attribute vec3 vs_offset;',
'attribute vec3 vs_velocity;',
'attribute vec3 vs_id;',
'varying vec4 fs_col;',
'uniform mat4 u_ViewProj;',
'mat4 rotationMatrix(vec3 axis, float angle)',
'{',
'    axis = normalize(axis);',
'    float s = sin(angle);',
'    float c = cos(angle);',
'    float oc = 1.0 - c;',
'    ',
'    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,',
'                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,',
'                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,',
'                0.0,                                0.0,                                0.0,                                1.0);',
'}',
'float atan2(in float y, in float x)',
'{',
'    bool s = (abs(x) > abs(y));',
'    float v1 = 3.14159265/2.0 - atan(x,y);',
'    float v2 = atan(x,y);',
'    return (1.0-float(s))*v1 + float(s)*v2;',
'}',
'void main(void) { ',
'  fs_col = vec4(vs_id, 1);',
'  vec3 pos = vec3(vs_pos.x, 0, vs_pos.z);',
'  vec3 vel = normalize(vs_velocity);',
'  mat4 rot = rotationMatrix(vec3(0,1,0), atan2(-vel.z, vel.x));',
'  float fac = 2.0 + dot(normalize(pos), normalize(vs_velocity));',
'  fac = fac / 3.0;',
'  pos = vec3(rot * vs_pos);',
'  gl_Position = u_ViewProj * (vec4(pos,1) + vec4(vs_offset, 0));',
'}',
].join("\n");
